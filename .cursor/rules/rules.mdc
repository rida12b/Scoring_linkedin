---
description: 
globs: 
alwaysApply: false
---

# Your rule content
 
# R√®gle Cursor : D√©veloppement R√©flexif, Rigoureux et Document√©
 
## üéØ Objectif Principal
D√©velopper le projet de mani√®re **r√©flexive**, it√©rative et fiable, en utilisant `suivi_projet.md` comme source centrale, en **validant syst√©matiquement chaque modification via la documentation officielle**, et en **comprenant l'impact sur la structure globale du projet avant toute action.**
 
## üß† M√©thodologie de R√©flexion Syst√©matique (OBLIGATOIRE)
 
### 1. Analyse du Contexte
- **√âtat Actuel :**
  - Description pr√©cise de la situation/probl√®me
  - Identification des sympt√¥mes
  - Contexte d'apparition
- **Impact Global :**
  - Parties du code/syst√®me affect√©es
  - D√©pendances potentielles
  - Effets de bord possibles
- **Contraintes :**
  - Techniques (versions, compatibilit√©)
  - Fonctionnelles (exigences)
  - Temporelles (urgence, planning)
 
### 2. D√©composition du Probl√®me
- **Sous-probl√®mes :**
  - Identifier les composants principaux
  - Isoler les probl√©matiques distinctes
  - D√©finir les fronti√®res
- **D√©pendances :**
  - Cartographier les relations
  - Identifier les points critiques
  - √âtablir les pr√©requis
- **Priorisation :**
  - Ordre logique de r√©solution
  - Points bloquants
  - Quick wins potentiels
 
### 3. Recherche & Documentation
- **Sources Officielles :**
  - Documentation des frameworks/librairies
  - Guides de migration
  - Release notes
- **Patterns Connus :**
  - Solutions existantes
  - Best practices
  - Anti-patterns √† √©viter
- **Alternatives :**
  - Solutions concurrentes
  - Approches diff√©rentes
  - Trade-offs
 
### 4. Formulation d'Hypoth√®ses
- **Causes Possibles :**
  - Liste exhaustive
  - Probabilit√© relative
  - Impact potentiel
- **Preuves :**
  - √âl√©ments de support
  - Contre-exemples
  - Tests de validation
- **Validation :**
  - Crit√®res de confirmation
  - Tests sp√©cifiques
  - M√©triques de succ√®s
 
### 5. Plan d'Action
- **Solutions Potentielles :**
  - Description d√©taill√©e
  - √âtapes d'impl√©mentation
  - Ressources n√©cessaires
- **Avantages/Inconv√©nients :**
  - Impact court terme
  - Impact long terme
  - Maintenance
- **Crit√®res de Succ√®s :**
  - M√©triques mesurables
  - Tests de validation
  - Acceptance criteria
 
## üìñ Fichier Central : üìÇ `suivi_projet.md`
Source de v√©rit√© unique. **Consultation obligatoire avant toute action, mise √† jour obligatoire apr√®s chaque action.** Contient :
1. **Description G√©n√©rale :** Objectif, public, architecture
2. **Plan de T√¢ches :** Statuts (`[ ]`, `[/]`, `[x]`, `[!]`), priorit√©s
3. **Journal des Modifications :** Historique dat√©
4. **Suivi des Erreurs :** Section d√©taill√©e
5. **R√©sultats des Tests :** Validation
6. **Documentation Consult√©e :** R√©f√©rences cl√©s
7. **Structure du Projet :** Organisation des fichiers
8. **R√©flexions & D√©cisions :** Analyse des probl√®mes et solutions
 
## üõ†Ô∏è Workflow It√©ratif Essentiel
 
1. **üåç ANALYSE STRUCTURE & CONTEXTE :**
   - Examiner structure compl√®te
   - Lire `suivi_projet.md`
   - Comprendre l'√©cosyst√®me
 
2. **ü§î R√âFLEXION & PLANIFICATION :**
   - Appliquer M√©thodologie de R√©flexion
   - D√©composer le probl√®me
   - Documenter le raisonnement
 
3. **üìù V√âRIFICATION DOCUMENTATION :**
   - Consulter docs officielles
   - Valider approches
   - Noter r√©f√©rences
 
4. **üí° CONCEPTION SOLUTION :**
   - Proposer solution d√©taill√©e
   - Justifier choix techniques
   - Anticiper impacts
 
5. **‚öôÔ∏è IMPL√âMENTATION :**
   - Suivre plan √©tabli
   - Tests unitaires
   - Documentation inline
 
6. **üîç VALIDATION :**
   - Tests fonctionnels
   - Tests de r√©gression
   - Revue de code
 
7. **üìã DOCUMENTATION :**
   - Mettre √† jour `suivi_projet.md`
   - Changelog
   - Le√ßons apprises
 
## üêõ Gestion des Erreurs & Debugging
 
### Phase 1 : Observation
1. **Collecter Informations :**
   - Message d'erreur exact
   - Stack trace complet
   - Contexte d'apparition
2. **Reproduire :**
   - Cas minimal
   - Conditions d√©clenchantes
   - Documentation √©tapes
 
### Phase 2 : Analyse
1. **Contexte :**
   - Code environnant
   - Modifications r√©centes
   - Patterns similaires
2. **Hypoth√®ses :**
   - Causes possibles
   - Probabilit√©s
   - Justifications
 
### Phase 3 : Investigation
1. **Validation :**
   - Tests par hypoth√®se
   - Collecte preuves
   - √âlimination hypoth√®ses
2. **Documentation :**
   - Recherche docs
   - Cas similaires
   - Solutions connues
 
### Phase 4 : R√©solution
1. **Solution :**
   - Description d√©taill√©e
   - Justification technique
   - Impact anticip√©
2. **Validation :**
   - Tests complets
   - Documentation
   - Revue solution
 
## üìö Apprentissage Continu
 
### 1. Capitalisation
- **Patterns :** Solutions r√©utilisables
- **Anti-patterns :** Pi√®ges √† √©viter
- **Best Practices :** Standards √† suivre
 
### 2. Am√©lioration Process
- **Retours :** Succ√®s/√©checs
- **Ajustements :** Optimisations
- **Partage :** Documentation
 
## üèÜ R√àGLE D'OR
 
 
**Toujours privil√©gier une approche r√©flexive et document√©e plut√¥t qu'une correction rapide et intuitive.**
 
---
 
## üí° Rappels Importants
- V√©rifier coh√©rence globale
- Documenter chaque d√©cision
- Tester syst√©matiquement
- Partager les apprentissages

- You can @ files here
- You can use markdown but dont have to
